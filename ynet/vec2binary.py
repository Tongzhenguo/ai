#! /usr/bin/env python
# -*-coding:utf-8 -*-

import struct
import argparse


# Basic model parameters as external flags.
FLAGS = None


def vec2binary(filename, targetfile):
    with open(targetfile, "wb") as fout:
        for index, line in enumerate(open(filename)):
            tokens = line.strip().split(' ')
            if index == 0:
                nums = map(int, tokens)
                ff = '<i'
            else:
                nums = map(float, tokens[1:])
                ff = '<f'
            for num in nums:
                fout.write(struct.pack(ff, num))


def binary2vec(binaryfile, vecfile):
    with open(binaryfile, 'rb') as fbinary:
        with open(vecfile, 'w') as fvec:
            databytes = fbinary.read()
            total = struct.unpack('<i', databytes[0:4])[0]
            dim = struct.unpack('<i', databytes[4:8])[0]
            fvec.write(str(total))
            fvec.write(' ')
            fvec.write(str(dim))
            fvec.write('\n')
            for x in xrange(total):
                for y in xrange(dim):
                    offset = 8 + (x * dim + y) * 4
                    num = struct.unpack('<f', databytes[offset:offset+4])[0]
                    fvec.write(str(num))
                    fvec.write(' ')
                fvec.write('\n')


def main():
    if FLAGS.binary is True:
        binary2vec(FLAGS.input, FLAGS.output)
    else:
        vec2binary(FLAGS.input, FLAGS.output)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input',
        type=str,
        default='input.vec',
        help='Word vector file generated by fasttext.'
    )

    parser.add_argument(
        '--output',
        type=str,
        default='output.vec.binary',
        help='Binary form of input word vector.'
    )

    parser.add_argument(
        '--binary',
        type=bool,
        default=False,
        help='True: Convert binary form to text form.'
    )

    FLAGS, unparsed = parser.parse_known_args()
    main()
