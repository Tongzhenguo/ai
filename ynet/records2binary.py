#! /usr/bin/env python
# -*-coding:utf-8 -*-

import struct
import argparse
import random


# Basic model parameters as external flags.
FLAGS = None


def records2binary(recordsfile, dictfile, watchedfile, predictsfile):
    D = dict()
    # load dict
    for index, line in enumerate(open(dictfile, "r")):
        D[line.strip()] = index

    watched_size = FLAGS.watched_size
    with open(watchedfile, "wb") as fwatched:
        with open(predictsfile, "wb") as fpredicts:
            for index, line in enumerate(open(recordsfile, "r")):
                tokens = line.strip().split(' ')
                records = tokens[1:]  # skip __label__
                # generate binary records
                max_start = len(records) - watched_size - 1
                num_sampled = min(max_start, FLAGS.max_per_user)
                sampled = random.sample(range(max_start), num_sampled)
                for start in xrange(sampled):
                    for r in xrange(start, start + watched_size):
                        index = D[records[r]]
                        fwatched.write(struct.pack('<i', index))
                    predict_index = D[records[start + watched_size]]
                    fpredicts.write(struct.pack('<i', predict_index))


def main():
    records2binary(FLAGS.input,
                   FLAGS.input_dict_file,
                   FLAGS.output_watched,
                   FLAGS.output_predicts)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input',
        type=str,
        default='input.fasttext',
        help='records file generated by transform.py.'
    )

    parser.add_argument(
        '--output_watched',
        type=str,
        default='output.fasttext.watched',
        help='Binary form of watched records.'
    )

    parser.add_argument(
        '--output_predicts',
        type=str,
        default='output.fasttext.predicts',
        help='Binary form of predicts for watched records.'
    )

    parser.add_argument(
        '--input_dict_file',
        type=str,
        default='input.fasttext.dict',
        help='Input dict file for records, generated by vec2binary.py.'
    )

    parser.add_argument(
        '--binary',
        type=bool,
        default=False,
        help='True: Convert binary form to text form.'
    )

    parser.add_argument(
        '--watched_size',
        type=int,
        default=20,
        help='Watched size.'
    )

    parser.add_argument(
        '--max_per_user',
        type=int,
        default=5,
        help='Max number of watched windows selected per user.'
    )

    FLAGS, unparsed = parser.parse_known_args()
    main()
